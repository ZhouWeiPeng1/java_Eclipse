/*
    类：是对现实生活中一类具有共同属性和行为的事物的抽象
   对象： 是能够看得到摸的着的真实存在的实体
    
    类的特点：
    *类是对象的数据类型
    *类是具有相同属性和行为的一组对象的集合
    
              属性：对象具有的各种特征，每个对象的每个属性都有特定的值
              行为：对象能够执行的操作
              *属性：在类中通过成员变量来体现（类中方法外的变量）
              *行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可)
             
             1、定义类                                                              public class 类名{
             2、编写类的成员变量                                                         //成员变量1的数据类型  变量1；
             3、编写类的成员方法                                                         //成员变量2的数据类型 变量2；
             													・・・・・・
             												   //成员方法
             												         方法1;
             												         方法2;
             												    ・・・・・・
             												    } 
              成员变量：类中方法外的变量
              局部变量：方法中的变量
              
              区别：
              		成员变量							局部变量
             类中位置不同   		类中方法外						方法内或者方法声明上
             内存中位置不同		堆内存						栈内存
             生命周期不同		随着对象的存在而存在，			随着方法的调用而存在，随着方法的调用
             		随着对象的消失而消失				完毕而消失
            初始化值不同 		有默认的初始化值					没有默认的初始化值，必须先定义，赋值，
            									才能使用
            								
         *private关键字
          *是一个权限修饰符
          *可以修饰成员（成员变量和成员方法）
          *作用是保护成员不被别的类使用，被private修饰的成员只能在本类中才能访问
          
          	针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作
          	*提供"set变量名(参数)"方法，用于设置成员变量的值，方法用public修饰
          	*提供"get变量名()"方法，用于获取成员变量的值，方法用public修饰
          	
 */
//需求：
	//首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用
package 类和对象;
public class Text06 {
	     String name;
//	     int age;
	     private int age;
	     public void study() {
	    	 System.out.println("好好学习，天天向上");
	     }
	     public void doHomework() {
	    	 System.out.println("键盘敲烂，月薪过万");
	     }
	     public void setAge(int a) {
//	    	 age=a;
	    	 if(a<0||a>120) {
	    		 System.out.println("你给的年龄有误");
	    	 }else {
	    		 age=a;
	    	 }
	     }
	     public int getAge() {
	    	 return age;
	     }
	     public void show() {
	    	 System.out.println(name+","+age);
	     }
		
}
